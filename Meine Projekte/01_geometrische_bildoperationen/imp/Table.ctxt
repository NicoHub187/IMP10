#BlueJ class context
comment0.target=Table
comment1.params=
comment1.target=Table()
comment1.text=\ \r\n\ Erzeugt\ leeres\ Tabellen-Dokument.\r\n
comment10.params=filename\ options\ separator\ quote
comment10.target=void\ saveCSV(java.lang.String,\ java.lang.String,\ char,\ char)
comment10.text=\ \r\n\ Speichert\ das\ aktuelle\ Dokument\ als\ CSV-Datei.\ \r\n\ Wenn\ die\ Datei\ eine\ Kopfzeile\ enthalten,\ f\u00C3\u00BCgen\ Sie\ "header"\ in\ den\ Parameter\ options\ ein.\ Wenn\ die\ Datei\ keine\ Kopfzeile\ haben\ soll,\ \r\n\ dann\ lassen\ Sie\ einfach\ die\ Option\ "header"\ weg.\r\n\ @param\ options\ Geben\ Sie\ hier\ "header"\ an,\ wenn\ die\ Datei\ eine\ Kopfzeile\ haben\ soll.\r\n\ @param\ filename\ Dateiname\ der\ CSV-Datei.\r\n\ @param\ separator\ Trennzeichen\ f\u00C3\u00BCr\ Spalten\ (meist\ ';'\ oder\ ','\ oder\ '\\t'\ f\u00C3\u00BCr\ Tab)\r\n\ @param\ quote\ Kennung\ f\u00C3\u00BCr\ Texte\ (meist\ '"').\ \r\n
comment11.params=filename
comment11.target=void\ saveXML(java.lang.String)
comment11.text=\ Speichert\ die\ Tabelle\ als\ XML-Dokument.\r\n\ \ @param\ filename\ Dateiname\ des\ XML-Files\r\n
comment12.params=cvsLine
comment12.target=java.util.List\ parseLine(java.lang.String)
comment12.text=\ HIlfsfunktion\ f\u00C3\u00BCr\ die\ Analyse\ einer\ Dateizeile\r\n\ @param\ cvsLine\ Zeile\ aus\ der\ Datei\r\n\ @return\ Liste\ von\ String\ f\u00C3\u00BCr\ die\ einzelnen\ Spalten\r\n
comment13.params=cvsLine\ separator
comment13.target=java.util.List\ parseLine(java.lang.String,\ char)
comment13.text=\ HIlfsfunktion\ f\u00C3\u00BCr\ die\ Analyse\ einer\ Dateizeile\r\n\ @param\ cvsLine\ Zeile\ aus\ der\ Datei\r\n\ @param\ sparator\ Trennzeichen\ f\u00C3\u00BCr\ die\ Spalten\ \r\n\ @return\ Liste\ von\ String\ f\u00C3\u00BCr\ die\ einzelnen\ Spalten\r\n
comment14.params=cvsLine\ separator\ customQuote
comment14.target=java.util.List\ parseLine(java.lang.String,\ char,\ char)
comment14.text=\ HIlfsfunktion\ f\u00C3\u00BCr\ die\ Analyse\ einer\ Dateizeile\r\n\ @param\ cvsLine\ Zeile\ aus\ der\ Datei\r\n\ @param\ sparator\ Trennzeichen\ f\u00C3\u00BCr\ die\ Spalten\ \r\n\ @param\ customQuote\ Kennung\ f\u00C3\u00BCr\ Strings\r\n\ @return\ Liste\ von\ String\ f\u00C3\u00BCr\ die\ einzelnen\ Spalten\r\n
comment15.params=name
comment15.target=int\ findColumnNumber(java.lang.String)
comment15.text=\ \r\n\ \ Sucht\ die\ Nummer\ einer\ durch\ Namen\ gegebenen\ Spalte.\r\n\ \ @param\ name\ Name\ der\ Spalte\r\n\ \ @return\ Nummer\ der\ Spalte\r\n
comment16.params=
comment16.target=void\ addColumn()
comment16.text=\r\n\ F\u00C3\u00BCgt\ eine\ neue\ Spalte\ am\ Ende\ der\ Tabelle\ an.\r\n
comment17.params=title
comment17.target=void\ addColumn(java.lang.String)
comment17.text=\ \r\n\ F\u00C3\u00BCgt\ eine\ neue\ Spalte\ am\ Ende\ der\ Tabelle\ an\ und\ benennt\ sie.\r\n\ @param\ title\ Bezeichnung\ der\ Spalte\r\n
comment18.params=title\ type
comment18.target=void\ addColumn(java.lang.String,\ java.lang.String)
comment18.text=\r\n\ F\u00C3\u00BCgt\ eine\ neue\ Spalte\ am\ Ende\ der\ Tabelle\ an\ und\ benennt\ und\ typisiert\ sie.\r\n\ @param\ title\ Bezeichnung\ der\ Spalte\r\n\ @param\ type\ Typ\ der\ Spalte\ (UNKNOWN,\ DOUBLE,\ INTEGER,\ FLOAT)\r\n
comment19.params=i
comment19.target=void\ removeColumn(int)
comment19.text=\r\n\ L\u00C3\u00B6scht\ eine\ Spalte.\r\n\ @param\ i\ Nummer\ der\ Spalte.\r\n
comment2.params=filename\ options\ separator\ quote
comment2.target=Table(java.lang.String,\ java.lang.String,\ char,\ char)
comment2.text=\ \r\n\ Erzeugt\ Tabellen-Dokument\ aus\ einer\ CSV-Datei.\r\n\ Liest\ den\ Inhalt\ einer\ Datei\ und\ erstellt\ ein\ Tabellenobjekt\ mit\ seinen\ Werten.\ \r\n\ Wenn\ die\ Datei\ eine\ Kopfzeile\ enth\u00C3\u00A4lt,\ f\u00C3\u00BCgen\ Sie\ "header"\ in\ den\ Parameter\ options\ ein.\ Wenn\ die\ Datei\ keine\ Kopfzeile\ hat,\ \r\n\ dann\ lassen\ Sie\ einfach\ die\ Option\ "header"\ weg.\r\n\ @param\ filename\ Dateiname\ der\ CSV-Datei.\r\n\ @param\ options\ Geben\ Sie\ hier\ "header"\ an,\ wenn\ die\ Datei\ eine\ Kopfzeile\ enth\u00C3\u00A4lt.\r\n\ @param\ separator\ Trennzeichen\ f\u00C3\u00BCr\ Spalten\ (meist\ ';'\ oder\ ','\ oder\ '\\t'\ f\u00C3\u00BCr\ Tab)\r\n\ @param\ quote\ Kennung\ f\u00C3\u00BCr\ Texte\ (meist\ '"').\ \r\n
comment20.params=name
comment20.target=void\ removeColumn(java.lang.String)
comment20.text=\r\n\ L\u00C3\u00B6scht\ eine\ Spalte\r\n\ @param\ name\ Name\ der\ Spalte\r\n
comment21.params=
comment21.target=int\ getColumnCount()
comment21.text=\r\n\ Liefert\ die\ Anzahl\ der\ Spalten\ in\ der\ Tabelle\r\n\ @return\ Anzahl\ der\ Spalten\r\n
comment22.params=
comment22.target=int\ getRowCount()
comment22.text=\r\n\ Liefert\ die\ Anzahl\ der\ Zeilen\ in\ der\ Tabelle\r\n\ @return\ Anzahl\ der\ Zeilen\r\n
comment23.params=
comment23.target=void\ clearRows()
comment23.text=\ \r\n\ L\u00C3\u00B6scht\ alle\ Zeilen\ der\ Tabelle.\r\n\ Die\ Spalten\u00C3\u00BCberschriften\ und\ Typen\ bleiben\ erhalten.\r\n
comment24.params=
comment24.target=TableRow\ addRow()
comment24.text=\r\n\ F\u00C3\u00BCgt\ eine\ neue\ Zeile\ an\ das\ Ende\ der\ Tabelle\ an.\r\n\ @return\ ein\ TableRow-Objekt\ f\u00C3\u00BCr\ diese\ neue\ Zeile\r\n
comment25.params=i
comment25.target=void\ removeRow(int)
comment25.text=\r\n\ L\u00C3\u00B6scht\ eine\ Zeile\r\n\ @param\ i\ Nummer\ der\ Zeile\r\n
comment26.params=i
comment26.target=TableRow\ getRow(int)
comment26.text=\ \r\n\ Liefert\ eine\ Zeile\ der\ Tabelle\r\n\ @param\ i\ Nummer\ der\ Zeile\r\n\ @return\ TableRow-Objekt\ f\u00C3\u00BCr\ diese\ Zeile\r\n
comment27.params=
comment27.target=TableRow[]\ rows()
comment27.text=\r\n\ Liefert\ die\ ganze\ Tabelle\ als\ Array\ von\ TableRow-Objekten\r\n\ @return\ Array\ von\ TableRow-Objekten\ \r\n
comment28.params=row\ column
comment28.target=int\ getInt(int,\ int)
comment28.text=\r\n\ Liefert\ den\ Wert\ einer\ Zelle\ als\ Integer-Zahl\r\n\ @param\ row\ Zeilennummer\r\n\ @param\ column\ Spaltennummer\r\n\ @return\ Wert\ der\ Zelle\r\n
comment29.params=row\ name
comment29.target=int\ getInt(int,\ java.lang.String)
comment29.text=\r\n\ Liefert\ den\ Wert\ einer\ Zelle\ als\ Integer-Zahl\r\n\ @param\ row\ Zeilennummer\r\n\ @param\ name\ Name\ der\ Spalte\r\n\ @return\ Wert\ der\ Zelle\r\n
comment3.params=filename\ options
comment3.target=Table(java.lang.String,\ java.lang.String)
comment3.text=\ \r\n\ Erzeugt\ Tabellen-Dokument\ aus\ einer\ CSV-Datei.\r\n\ Liest\ den\ Inhalt\ einer\ Datei\ und\ erstellt\ ein\ Tabellenobjekt\ mit\ seinen\ Werten\ (Separator\ \=\ ';',\ Kennung\ f\u00C3\u00BCr\ Text\ \=\ '"').\ \r\n\ Wenn\ die\ Datei\ eine\ Kopfzeile\ enth\u00C3\u00A4lt,\ f\u00C3\u00BCgen\ Sie\ "header"\ in\ den\ Parameter\ options\ ein.\ Wenn\ die\ Datei\ keine\ Kopfzeile\ hat,\ \r\n\ dann\ lassen\ Sie\ einfach\ die\ Option\ "header"\ weg.\r\n\ @param\ filename\ Dateiname\ der\ CSV-Datei.\r\n\ @param\ options\ Geben\ Sie\ hier\ "header"\ an,\ wenn\ die\ Datei\ eine\ Kopfzeile\ enth\u00C3\u00A4lt.\r\n
comment30.params=row\ column\ value
comment30.target=void\ setInt(int,\ int,\ int)
comment30.text=\r\n\ Setzt\ den\ Wert\ einer\ Zelle\ als\ Integer-Zahl\r\n\ @param\ row\ Zeilennummer\r\n\ @param\ column\ Spaltennummer\r\n\ @param\ value\ neuer\ Wert\ der\ Zelle\r\n
comment31.params=row\ name\ value
comment31.target=void\ setInt(int,\ java.lang.String,\ int)
comment31.text=\r\n\ Setzt\ den\ Wert\ einer\ Zelle\ als\ Integer-Zahl\r\n\ @param\ row\ Zeilennummer\r\n\ @param\ name\ Name\ der\ Spalte\r\n\ @param\ value\ neuer\ Wert\ der\ Zelle\r\n
comment32.params=row
comment32.target=int[]\ getIntRow(int)
comment32.text=\r\n\ Liefert\ alle\ Werte\ einer\ Zeile\ als\ Integer-Array.\r\n\ @param\ row\ Nummer\ der\ Zeile\r\n\ @return\ int-Array,\ dass\ alle\ Werte\ der\ Zeile\ enth\u00C3\u00A4lt\r\n
comment33.params=column
comment33.target=int[]\ getIntColumn(int)
comment33.text=\r\n\ Liefert\ alle\ Werte\ einer\ Spalte\ als\ Integer-Array.\r\n\ @param\ column\ Nummer\ der\ Spalte\r\n\ @return\ int-Array,\ dass\ alle\ Werte\ der\ Spalte\ enth\u00C3\u00A4lt\r\n
comment34.params=name
comment34.target=int[]\ getIntColumn(java.lang.String)
comment34.text=\r\n\ Liefert\ alle\ Werte\ einer\ Spalte\ als\ Integer-Array.\r\n\ @param\ name\ Name\ der\ Spalte\r\n\ @return\ int-Array,\ dass\ alle\ Werte\ der\ Spalte\ enth\u00C3\u00A4lt\r\n
comment35.params=row\ column
comment35.target=float\ getFloat(int,\ int)
comment35.text=\r\n\ Liefert\ den\ Wert\ einer\ Zelle\ als\ Float-Zahl\r\n\ @param\ row\ Zeilennummer\r\n\ @param\ column\ Spaltennummer\r\n\ @return\ Wert\ der\ Zelle\r\n
comment36.params=row\ name
comment36.target=float\ getFloat(int,\ java.lang.String)
comment36.text=\r\n\ Liefert\ den\ Wert\ einer\ Zelle\ als\ Float-Zahl\r\n\ @param\ row\ Zeilennummer\r\n\ @param\ name\ Name\ der\ Spalte\r\n\ @return\ Wert\ der\ Zelle\r\n
comment37.params=row\ column\ value
comment37.target=void\ setFloat(int,\ int,\ float)
comment37.text=\r\n\ Setzt\ den\ Wert\ einer\ Zelle\ als\ Float-Zahl\r\n\ @param\ row\ Zeilennummer\r\n\ @param\ column\ Spaltennummer\r\n\ @param\ value\ neuer\ Wert\ der\ Zelle\r\n
comment38.params=row\ name\ value
comment38.target=void\ setFloat(int,\ java.lang.String,\ float)
comment38.text=\r\n\ Setzt\ den\ Wert\ einer\ Zelle\ als\ Float-Zahl\r\n\ @param\ row\ Zeilennummer\r\n\ @param\ name\ Name\ der\ Spalte\r\n\ @param\ value\ neuer\ Wert\ der\ Zelle\r\n
comment39.params=row
comment39.target=float[]\ getFloatRow(int)
comment39.text=\r\n\ Liefert\ alle\ Werte\ einer\ Zeile\ als\ Float-Array.\r\n\ @param\ row\ Nummer\ der\ Zeile\r\n\ @return\ int-Array,\ dass\ alle\ Werte\ der\ Zeile\ enth\u00C3\u00A4lt\r\n
comment4.params=filename
comment4.target=Table(java.lang.String)
comment4.text=\ \r\n\ Erzeugt\ Tabellen-Dokument\ aus\ einer\ CSV-Datei.\r\n\ Liest\ den\ Inhalt\ einer\ Datei\ ohne\ Kopfzeile\ und\ erstellt\ ein\ Tabellenobjekt\ mit\ seinen\ Werten\ (Separator\ \=\ ';',\ Kennung\ f\u00C3\u00BCr\ Text\ \=\ '"').\ \r\n\ @param\ filename\ Dateiname\ der\ CSV-Datei.\r\n
comment40.params=column
comment40.target=float[]\ getFloatColumn(int)
comment40.text=\r\n\ Liefert\ alle\ Werte\ einer\ Spalte\ als\ Float-Array.\r\n\ @param\ column\ Nummer\ der\ Spalte\r\n\ @return\ int-Array,\ dass\ alle\ Werte\ der\ Spalte\ enth\u00C3\u00A4lt\r\n
comment41.params=name
comment41.target=float[]\ getFloatColumn(java.lang.String)
comment41.text=\r\n\ Liefert\ alle\ Werte\ einer\ Spalte\ als\ Float-Array.\r\n\ @param\ name\ Name\ der\ Spalte\r\n\ @return\ int-Array,\ dass\ alle\ Werte\ der\ Spalte\ enth\u00C3\u00A4lt\r\n
comment42.params=row\ column
comment42.target=double\ getDouble(int,\ int)
comment42.text=\r\n\ Liefert\ den\ Wert\ einer\ Zelle\ als\ Double-Zahl\r\n\ @param\ row\ Zeilennummer\r\n\ @param\ column\ Spaltennummer\r\n\ @return\ Wert\ der\ Zelle\r\n
comment43.params=row\ name
comment43.target=double\ getDouble(int,\ java.lang.String)
comment43.text=\r\n\ Liefert\ den\ Wert\ einer\ Zelle\ als\ Double-Zahl\r\n\ @param\ row\ Zeilennummer\r\n\ @param\ name\ Name\ der\ Spalte\r\n\ @return\ Wert\ der\ Zelle\r\n
comment44.params=row\ column\ value
comment44.target=void\ setDouble(int,\ int,\ double)
comment44.text=\r\n\ Setzt\ den\ Wert\ einer\ Zelle\ als\ Double-Zahl\r\n\ @param\ row\ Zeilennummer\r\n\ @param\ column\ Spaltennummer\r\n\ @param\ value\ neuer\ Wert\ der\ Zelle\r\n
comment45.params=row\ name\ value
comment45.target=void\ setDouble(int,\ java.lang.String,\ double)
comment45.text=\r\n\ Setzt\ den\ Wert\ einer\ Zelle\ als\ Double-Zahl\r\n\ @param\ row\ Zeilennummer\r\n\ @param\ name\ Name\ der\ Spalte\r\n\ @param\ value\ neuer\ Wert\ der\ Zelle\r\n
comment46.params=row
comment46.target=double[]\ getDoubleRow(int)
comment46.text=\r\n\ Liefert\ alle\ Werte\ einer\ Spalte\ als\ Double-Array.\r\n\ @param\ row\ Nummer\ der\ Spalte\r\n\ @return\ int-Array,\ dass\ alle\ Werte\ der\ Spalte\ enth\u00C3\u00A4lt\r\n
comment47.params=column
comment47.target=double[]\ getDoubleColumn(int)
comment47.text=\r\n\ Liefert\ alle\ Werte\ einer\ Spalte\ als\ Double-Array.\r\n\ @param\ column\ Nummer\ der\ Spalte\r\n\ @return\ int-Array,\ dass\ alle\ Werte\ der\ Spalte\ enth\u00C3\u00A4lt\r\n
comment48.params=name
comment48.target=double[]\ getDoubleColumn(java.lang.String)
comment48.text=\r\n\ Liefert\ alle\ Werte\ einer\ Spalte\ als\ Double-Array.\r\n\ @param\ name\ Name\ der\ Spalte\r\n\ @return\ int-Array,\ dass\ alle\ Werte\ der\ Spalte\ enth\u00C3\u00A4lt\r\n
comment49.params=row\ column
comment49.target=java.lang.String\ getString(int,\ int)
comment49.text=\r\n\ Liefert\ den\ Wert\ einer\ Zelle\ als\ String\r\n\ @param\ row\ Zeilennummer\r\n\ @param\ column\ Spaltennummer\r\n\ @return\ Wert\ der\ Zelle\r\n
comment5.params=filename
comment5.target=void\ loadCSV(java.lang.String)
comment5.text=\ \r\n\ Liest\ den\ Inhalt\ einer\ CSV-Datei\ ohne\ Kopfzeile\ (Separator\ \=\ ';',\ Kennung\ f\u00C3\u00BCr\ Text\ \=\ '"').\ \r\n\ @param\ filename\ Dateiname\ der\ CSV-Datei.\r\n
comment50.params=row\ name
comment50.target=java.lang.String\ getString(int,\ java.lang.String)
comment50.text=\r\n\ Liefert\ den\ Wert\ einer\ Zelle\ als\ String\r\n\ @param\ row\ Zeilennummer\r\n\ @param\ name\ Name\ der\ Spalte\r\n\ @return\ Wert\ der\ Zelle\r\n
comment51.params=row\ column\ text
comment51.target=void\ setString(int,\ int,\ java.lang.String)
comment51.text=\r\n\ Setzt\ den\ Wert\ einer\ Zelle\ als\ String\r\n\ @param\ row\ Zeilennummer\r\n\ @param\ column\ Spaltennummer\r\n\ @param\ text\ neuer\ Wert\ der\ Zelle\r\n
comment52.params=row\ name\ text
comment52.target=void\ setString(int,\ java.lang.String,\ java.lang.String)
comment52.text=\r\n\ Setzt\ den\ Wert\ einer\ Zelle\ als\ String\r\n\ @param\ row\ Zeilennummer\r\n\ @param\ name\ Name\ der\ Spalte\r\n\ @param\ text\ neuer\ Wert\ der\ Zelle\r\n
comment53.params=row
comment53.target=java.lang.String[]\ getStringRow(int)
comment53.text=\r\n\ Liefert\ alle\ Werte\ einer\ Spalte\ als\ String-Array.\r\n\ @param\ row\ Nummer\ der\ Spalte\r\n\ @return\ int-Array,\ dass\ alle\ Werte\ der\ Spalte\ enth\u00C3\u00A4lt\r\n
comment54.params=column
comment54.target=java.lang.String[]\ getStringColumn(int)
comment54.text=\r\n\ Liefert\ alle\ Werte\ einer\ Spalte\ als\ String-Array.\r\n\ @param\ column\ Nummer\ der\ Spalte\r\n\ @return\ int-Array,\ dass\ alle\ Werte\ der\ Spalte\ enth\u00C3\u00A4lt\r\n
comment55.params=name
comment55.target=java.lang.String[]\ getStringColumn(java.lang.String)
comment55.text=\r\n\ Liefert\ alle\ Werte\ einer\ Spalte\ als\ String-Array.\r\n\ @param\ name\ Name\ der\ Spalte\r\n\ @return\ int-Array,\ dass\ alle\ Werte\ der\ Spalte\ enth\u00C3\u00A4lt\r\n
comment56.params=value\ column
comment56.target=TableRow\ findRow(java.lang.String,\ int)
comment56.text=\r\n\ Sucht\ nach\ einem\ bestimmtem\ Wert\ in\ einer\ Zeile.\r\n\ @param\ value\ Wert\ der\ gesucht\ werden\ soll\r\n\ @param\ column\ Nummer\ der\ Spalte,\ die\ durchsucht\ werden\ soll\r\n\ @return\ TableRow-Objekt\ der\ Zeile,\ wenn\ der\ Wert\ gefunden\ wurde,\ sonst\ null\r\n
comment57.params=value\ name
comment57.target=TableRow\ findRow(java.lang.String,\ java.lang.String)
comment57.text=\r\n\ Sucht\ nach\ einem\ bestimmtem\ Wert\ in\ einer\ Zeile.\r\n\ @param\ value\ Wert\ der\ gesucht\ werden\ soll\r\n\ @param\ name\ Name\ der\ Spalte,\ die\ durchsucht\ werden\ soll\r\n\ @return\ TableRow-Objekt\ der\ Zeile,\ wenn\ der\ Wert\ gefunden\ wurde,\ sonst\ null\r\n
comment58.params=
comment58.target=void\ trim()
comment58.text=\ \r\n\ K\u00C3\u00BCrzt\ alle\ Eintr\u00C3\u00A4ge\ der\ Tabelle\ um\ unn\u00C3\u00B6tige\ Leerzeichen\ am\ Anfang\ oder\ Ende\r\n
comment6.params=filename\ options
comment6.target=void\ loadCSV(java.lang.String,\ java.lang.String)
comment6.text=\ \r\n\ Liest\ den\ Inhalt\ einer\ CSV-Datei\ \ (Separator\ \=\ ';',\ Kennung\ f\u00C3\u00BCr\ Text\ \=\ '"').\ \r\n\ Wenn\ die\ Datei\ eine\ Kopfzeile\ enth\u00C3\u00A4lt,\ f\u00C3\u00BCgen\ Sie\ "header"\ in\ den\ Parameter\ options\ ein.\ Wenn\ die\ Datei\ keine\ Kopfzeile\ hat,\ \r\n\ dann\ lassen\ Sie\ einfach\ die\ Option\ "header"\ weg.\r\n\ @param\ filename\ Dateiname\ der\ CSV-Datei.\r\n\ @param\ options\ Geben\ Sie\ hier\ "header"\ an,\ wenn\ die\ Datei\ eine\ Kopfzeile\ enth\u00C3\u00A4lt.\r\n
comment7.params=filename\ options\ separator\ quote
comment7.target=void\ loadCSV(java.lang.String,\ java.lang.String,\ char,\ char)
comment7.text=\ \r\n\ Liest\ den\ Inhalt\ einer\ CSV-Datei.\r\n\ Wenn\ die\ Datei\ eine\ Kopfzeile\ enth\u00C3\u00A4lt,\ f\u00C3\u00BCgen\ Sie\ "header"\ in\ den\ Parameter\ options\ ein.\ Wenn\ die\ Datei\ keine\ Kopfzeile\ hat,\ \r\n\ dann\ lassen\ Sie\ einfach\ die\ Option\ "header"\ weg.\r\n\ @param\ filename\ Dateiname\ der\ CSV-Datei.\r\n\ @param\ options\ Geben\ Sie\ hier\ "header"\ an,\ wenn\ die\ Datei\ eine\ Kopfzeile\ enth\u00C3\u00A4lt.\r\n\ @param\ separator\ Trennzeichen\ f\u00C3\u00BCr\ Spalten\ (meist\ ';'\ oder\ ','\ oder\ '\\t'\ f\u00C3\u00BCr\ Tab)\r\n\ @param\ quote\ Kennung\ f\u00C3\u00BCr\ Texte\ (meist\ '"').\ \r\n
comment8.params=filename
comment8.target=void\ saveCSV(java.lang.String)
comment8.text=\ \r\n\ Speichert\ das\ aktuelle\ Dokument\ als\ CSV-Datei\ ohne\ Kopfzeile\ (Separator\ \=\ ';',\ Kennung\ f\u00C3\u00BCr\ Text\ \=\ '"').\ \r\n\ @param\ filename\ Dateiname\ der\ CSV-Datei.\r\n
comment9.params=filename\ options
comment9.target=void\ saveCSV(java.lang.String,\ java.lang.String)
comment9.text=\ \r\n\ Speichert\ das\ aktuelle\ Dokument\ als\ CSV-Datei\ (Separator\ \=\ ';',\ Kennung\ f\u00C3\u00BCr\ Text\ \=\ '"').\ \r\n\ Wenn\ die\ Datei\ eine\ Kopfzeile\ enthalten,\ f\u00C3\u00BCgen\ Sie\ "header"\ in\ den\ Parameter\ options\ ein.\ Wenn\ die\ Datei\ keine\ Kopfzeile\ haben\ soll,\ \r\n\ dann\ lassen\ Sie\ einfach\ die\ Option\ "header"\ weg.\r\n\ @param\ options\ Geben\ Sie\ hier\ "header"\ an,\ wenn\ die\ Datei\ eine\ Kopfzeile\ haben\ soll.\r\n\ @param\ filename\ Dateiname\ der\ CSV-Datei.\r\n
numComments=59
