#BlueJ class context
comment0.target=XML
comment1.params=
comment1.target=XML()
comment1.text=\ \r\n\ Erzeugt\ ein\ leeres\ XMLDokument\ \r\n
comment10.params=name
comment10.target=XML[]\ getChildren(java.lang.String)
comment10.text=\r\n\ Liefert\ bestimmte\ Kinder\ des\ Elements\ als\ Array\ von\ XML-Objekten.\ \r\n\ Die\ Methode\ gibt\ dabei\ alle\ Kinder\ zur\u00C3\u00BCck,\ die\ dem\ angegebenen\ Namen\ entsprechen.\ \r\n\ @param\ name\ Name\ der\ gesuchten\ Kind-Objekte\r\n\ @return\ Array\ der\ Kinder\ als\ XML-Objekte\r\n
comment11.params=name
comment11.target=XML\ getChild(java.lang.String)
comment11.text=\r\n\ Liefert\ das\ erste\ Kind\ des\ Elements\ mit\ einem\ bestimmten\ Namen.\ \r\n\ Die\ Methode\ gibt\ das\ erste\ Kind\ zur\u00C3\u00BCck,\ das\ dem\ angegebenen\ Namen\ entsprechen.\ \r\n\ @param\ name\ Name\ des\ gesuchten\ Kind-Objektes\r\n\ @return\ Kind\ als\ XML-Objekt\r\n
comment12.params=i
comment12.target=XML\ getChild(int)
comment12.text=\r\n\ Liefert\ das\ i.\ Kind\ des\ Elements.\ \r\n\ Die\ Methode\ gibt\ das\ i.\ Kind\ des\ aktuellen\ Elements\ zur\u00C3\u00BCck.\r\n\ @param\ i\ Nummer\ des\ Kindes\r\n\ @return\ Kind\ als\ XML-Objekt\r\n
comment13.params=
comment13.target=java.lang.String\ getName()
comment13.text=\ \r\n\ Frage\ den\ Namen\ des\ aktuellen\ Elements\ ab\r\n\ @return\ Namen\ des\ Elements\r\n
comment14.params=name
comment14.target=void\ setName(java.lang.String)
comment14.text=\ \r\n\ Setze\ den\ Namen\ des\ aktuellen\ Elements.\ \r\n\ @param\ name\ Neuer\ Name\ des\ Elements\r\n
comment15.params=
comment15.target=int\ getAttributeCount()
comment15.text=\r\n\ liefert\ die\ Anzahl\ der\ Attribute\ eines\ Elements.\r\n\ @return\ Anzahl\ des\ Attribute\r\n
comment16.params=
comment16.target=boolean\ hasAttribute()
comment16.text=\r\n\ liefert\ zur\u00C3\u00BCck,\ ob\ das\ aktuelle\ Element\ Attribute\ hat\ .\r\n\ @return\ true,\ wenn\ es\ Attribute\ gibt\r\n
comment17.params=
comment17.target=java.lang.String[]\ listAttributes()
comment17.text=\r\n\ Ruft\ alle\ Attribute\ des\ angegebenen\ Elements\ ab\ und\ gibt\ sie\ als\ Array\ von\ Strings\ zur\u00C3\u00BCck.\r\n\ @return\ Liste\ der\ Attributnamen\r\n
comment18.params=attribute
comment18.target=java.lang.String\ getString(java.lang.String)
comment18.text=\ \r\n\ Fragt\ einen\ Attributwert\ des\ aktuellen\ Elements\ ab\r\n\ @param\ attribute\ Name\ des\ Attributs\r\n\ @return\ Wert\ des\ Attributs\r\n
comment19.params=attribute\ defaultValue
comment19.target=java.lang.String\ getString(java.lang.String,\ java.lang.String)
comment19.text=\ \r\n\ Fragt\ einen\ Attributwert\ des\ aktuellen\ Elements\ ab\r\n\ Sollte\ es\ das\ Attribut\ nicht\ geben,\ wird\ ein\ default-Wert\ zur\u00C3\u00BCckgegeben\r\n\ @param\ attribute\ Name\ des\ Attributs\r\n\ @param\ defaultValue\ Standardwert,\ falls\ es\ das\ Attribut\ nicht\ gibt\r\n\ @return\ Wert\ des\ Attributs\r\n
comment2.params=filename
comment2.target=XML(java.lang.String)
comment2.text=\ \r\n\ Erzeugt\ ein\ XML-Dokument\ aus\ einer\ Datei\ \r\n\ @param\ filename\ Dateiname\ der\ XML-Datei\r\n
comment20.params=attribute\ text
comment20.target=void\ setString(java.lang.String,\ java.lang.String)
comment20.text=\ \r\n\ Setzt\ einen\ Attributwert\ des\ aktuellen\ Elements\ \r\n\ @param\ attribute\ Name\ des\ Attributs\r\n\ @param\ text\ neuer\ Wert\ des\ Attributs\r\n
comment21.params=attribute
comment21.target=int\ getInt(java.lang.String)
comment21.text=\ \r\n\ Fragt\ einen\ Attributwert\ des\ aktuellen\ Elements\ ab\r\n\ @param\ attribute\ Name\ des\ Attributs\r\n\ @return\ Wert\ des\ Attributs\ als\ Integer-Zahl\r\n
comment22.params=attribute\ defaultValue
comment22.target=int\ getInt(java.lang.String,\ int)
comment22.text=\ \r\n\ Fragt\ einen\ Attributwert\ des\ aktuellen\ Elements\ ab\r\n\ Sollte\ es\ das\ Attribut\ nicht\ geben,\ wird\ ein\ default-Wert\ zur\u00C3\u00BCckgegeben\r\n\ @param\ attribute\ Name\ des\ Attributs\r\n\ @param\ defaultValue\ Standardwert,\ falls\ es\ das\ Attribut\ nicht\ gibt\r\n\ @return\ Wert\ des\ Attributs\ als\ Integer-Zahl\r\n
comment23.params=attribute\ value
comment23.target=void\ setInt(java.lang.String,\ int)
comment23.text=\ \r\n\ Setzt\ einen\ Attributwert\ des\ aktuellen\ Elements\ \r\n\ @param\ attribute\ Name\ des\ Attributs\r\n\ @param\ value\ neuer\ Wert\ des\ Attributs\r\n
comment24.params=attribute
comment24.target=float\ getFloat(java.lang.String)
comment24.text=\ \r\n\ Fragt\ einen\ Attributwert\ des\ aktuellen\ Elements\ ab\r\n\ @param\ attribute\ Name\ des\ Attributs\r\n\ @return\ Wert\ des\ Attributs\ als\ Float-Zahl\r\n
comment25.params=attribute\ defaultValue
comment25.target=float\ getFloat(java.lang.String,\ float)
comment25.text=\ \r\n\ Fragt\ einen\ Attributwert\ des\ aktuellen\ Elements\ ab\r\n\ Sollte\ es\ das\ Attribut\ nicht\ geben,\ wird\ ein\ default-Wert\ zur\u00C3\u00BCckgegeben\r\n\ @param\ attribute\ Name\ des\ Attributs\r\n\ @param\ defaultValue\ Standardwert,\ falls\ es\ das\ Attribut\ nicht\ gibt\r\n\ @return\ Wert\ des\ Attributs\ als\ Float-Zahl\r\n
comment26.params=attribute\ value
comment26.target=void\ setFloat(java.lang.String,\ float)
comment26.text=\ \r\n\ Setzt\ einen\ Attributwert\ des\ aktuellen\ Elements\ \r\n\ @param\ attribute\ Name\ des\ Attributs\r\n\ @param\ value\ neuer\ Wert\ des\ Attributs\r\n
comment27.params=attribute
comment27.target=double\ getDouble(java.lang.String)
comment27.text=\ \r\n\ Fragt\ einen\ Attributwert\ des\ aktuellen\ Elements\ ab\r\n\ @param\ attribute\ Name\ des\ Attributs\r\n\ @return\ Wert\ des\ Attributs\ als\ Double-Zahl\r\n
comment28.params=attribute\ defaultValue
comment28.target=double\ getDouble(java.lang.String,\ double)
comment28.text=\ \r\n\ Fragt\ einen\ Attributwert\ des\ aktuellen\ Elements\ ab\r\n\ Sollte\ es\ das\ Attribut\ nicht\ geben,\ wird\ ein\ default-Wert\ zur\u00C3\u00BCckgegeben\r\n\ @param\ attribute\ Name\ des\ Attributs\r\n\ @param\ defaultValue\ Standardwert,\ falls\ es\ das\ Attribut\ nicht\ gibt\r\n\ @return\ Wert\ des\ Attributs\ als\ double-Zahl\r\n
comment29.params=attribute\ value
comment29.target=void\ setDouble(java.lang.String,\ double)
comment29.text=\ \r\n\ Setzt\ einen\ Attributwert\ des\ aktuellen\ Elements\ \r\n\ @param\ attribute\ Name\ des\ Attributs\r\n\ @param\ value\ neuer\ Wert\ des\ Attributs\r\n
comment3.params=doc\ current
comment3.target=XML(org.jdom.Document,\ org.jdom.Element)
comment3.text=\r\n\ interner\ Konstruktor,\ um\ ein\ XML\ Objekt\ zu\ erzeugen,\ das\ auf\ einen\ bestimmten\ Knoten\ verweist\r\n\ @param\ doc\ die\ XML-Dokumentstruktur\r\n\ @param\ current\ Zeiger\ auf\ das\ aktuelle\ Element\ \r\n
comment30.params=
comment30.target=java.lang.String\ getContent()
comment30.text=\ \r\n\ Fragt\ den\ Inhalt/Text\ des\ aktuellen\ Elements\ ab\r\n\ @return\ Inhalt\ des\ Elements\r\n
comment31.params=defaultValue
comment31.target=java.lang.String\ getContent(java.lang.String)
comment31.text=\ \r\n\ Fragt\ den\ Inhalt/Text\ des\ aktuellen\ Elements\ ab\r\n\ Hat\ das\ Element\ keinen\ Inhalt\ wird\ der\ defaultValue\ zur\u00C3\u00BCckgegeben.\r\n\ @param\ defaultValue\ Standardtext\r\n\ @return\ Inhalt\ des\ Elements\r\n
comment32.params=text
comment32.target=void\ setContent(java.lang.String)
comment32.text=\ \r\n\ Setzt\ den\ Inhalt/Text\ des\ aktuellen\ Elements\r\n\ @param\ text\ Neuer\ Inhalt\ des\ Elements\r\n
comment33.params=defaultValue
comment33.target=int\ getIntContent(int)
comment33.text=\ \r\n\ Fragt\ den\ Inhalt\ des\ aktuellen\ Elements\ als\ Integerzahl\ ab\r\n\ Hat\ das\ Element\ keinen\ Inhalt\ wird\ der\ defaultValue\ zur\u00C3\u00BCckgegeben.\r\n\ @param\ defaultValue\ Standardwert\r\n\ @return\ Inhalt\ des\ Elements\r\n
comment34.params=
comment34.target=int\ getIntContent()
comment34.text=\ \r\n\ Fragt\ den\ Inhalt\ des\ aktuellen\ Elements\ als\ Integerzahl\ ab\r\n\ @return\ Inhalt\ des\ Elements\r\n
comment35.params=value
comment35.target=void\ setIntContent(int)
comment35.text=\ \r\n\ Setzt\ den\ Inhalt\ des\ aktuellen\ Elements\r\n\ @param\ value\ Neuer\ Inhalt\ des\ Elements\r\n
comment36.params=defaultValue
comment36.target=float\ getFloatContent(float)
comment36.text=\ \r\n\ Fragt\ den\ Inhalt\ des\ aktuellen\ Elements\ als\ Floatzahl\ ab\r\n\ Hat\ das\ Element\ keinen\ Inhalt\ wird\ der\ defaultValue\ zur\u00C3\u00BCckgegeben.\r\n\ @param\ defaultValue\ Standardwert\r\n\ @return\ Inhalt\ des\ Elements\r\n
comment37.params=
comment37.target=float\ getFloatContent()
comment37.text=\ \r\n\ Fragt\ den\ Inhalt\ des\ aktuellen\ Elements\ als\ Floatzahl\ ab\r\n\ @return\ Inhalt\ des\ Elements\r\n
comment38.params=value
comment38.target=void\ setFloatContent(float)
comment38.text=\ \r\n\ Setzt\ den\ Inhalt\ des\ aktuellen\ Elements\r\n\ @param\ value\ Neuer\ Inhalt\ des\ Elements\r\n
comment39.params=defaultValue
comment39.target=double\ getDoubleContent(double)
comment39.text=\ \r\n\ Fragt\ den\ Inhalt\ des\ aktuellen\ Elements\ als\ Doublezahl\ ab\r\n\ Hat\ das\ Element\ keinen\ Inhalt\ wird\ der\ defaultValue\ zur\u00C3\u00BCckgegeben.\r\n\ @param\ defaultValue\ Standardwert\r\n\ @return\ Inhalt\ des\ Elements\r\n
comment4.params=filename
comment4.target=void\ loadXML(java.lang.String)
comment4.text=\ \u00C3\u2013ffnet\ das\ durch\ den\ Dateinamen\ gegebene\ Dokument\ \r\n\ \ @param\ filename\ Dateiname\ des\ XML-Files\r\n
comment40.params=
comment40.target=double\ getDoubleContent()
comment40.text=\ \r\n\ Fragt\ den\ Inhalt\ des\ aktuellen\ Elements\ als\ Doublezahl\ ab\r\n\ @return\ Inhalt\ des\ Elements\r\n
comment41.params=value
comment41.target=void\ setDoubleContent(double)
comment41.text=\ \r\n\ Setzt\ den\ Inhalt\ des\ aktuellen\ Elements\r\n\ @param\ value\ Neuer\ Inhalt\ des\ Elements\r\n
comment42.params=name
comment42.target=XML\ addChild(java.lang.String)
comment42.text=\ Erzeuge\ neues\ Element\ nach\ der\ aktuellen\ Position\ und\ setze\ dieses\ als\ aktuelles\ Element\r\n\ @param\ name\ Name\ des\ neuen\ Elements\r\n\ @return\ neues\ Element\ als\ XML-Objekt\r\n
comment43.params=
comment43.target=org.jdom.Element\ getCurrent()
comment43.text=\ \r\n\ liefert\ das\ aktuelle\ Element\ als\ jdom-Element-Objekt\r\n\ @return\ aktuelles\ Element\r\n
comment44.params=kid
comment44.target=void\ removeChild(XML)
comment44.text=\r\n\ l\u00C3\u00B6scht\ ein\ Kind\ des\ aktuellen\ Knotens.\r\n\ Ist\ kid\ kein\ Kind\ des\ aktuellen\ Elements\ passiert\ gar\ nichts.\r\n\ @param\ kid\ XML-Objekt\ des\ Kindes\r\n
comment5.params=filename
comment5.target=void\ saveXML(java.lang.String)
comment5.text=\ Speichert\ den\ XML-Baum\ im\ angegebenen\ Dateinamen\r\n\ \ @param\ filename\ Dateiname\ des\ XML-Files\r\n
comment6.params=
comment6.target=XML\ getParent()
comment6.text=\r\n\ liefert\ ein\ XML-Objekt,\ das\ auf\ den\ Vaterknoten\ des\ aktuellen\ Elements\ zeigt.\r\n\ @return\ Vater\ des\ aktuellen\ Objekts.\r\n
comment7.params=
comment7.target=boolean\ hasChildren()
comment7.text=\r\n\ \u00C3\u0153berpr\u00C3\u00BCft,\ ob\ das\ Element\ irgendwelche\ Kinder\ hat\ oder\ nicht,\ und\ gibt\ das\ Ergebnis\ als\ boolean\ zur\u00C3\u00BCck.\ \r\n\ @return\ true,\ wenn\ Kinder\ vorhanden\ sind,\ sonst\ false\r\n
comment8.params=
comment8.target=java.lang.String[]\ listChildren()
comment8.text=\r\n\ Ermittelt\ die\ Namen\ aller\ Kinder\ des\ Elements\ und\ gibt\ die\ Namen\ als\ ein\ Array\ von\ Strings\ zur\u00C3\u00BCck.\ \r\n\ Dies\ ist\ dasselbe\ wie\ das\ Durchlaufen\ und\ Aufrufen\ von\ getName()\ auf\ jedem\ untergeordneten\ Element\ einzeln.\ \r\n\ @return\ Liste\ aller\ Namen\ der\ Kinder\r\n
comment9.params=
comment9.target=XML[]\ getChildren()
comment9.text=\r\n\ Liefert\ alle\ Kinder\ des\ Elements\ als\ Array\ von\ XML-Objekten.\ \r\n\ @return\ Array\ der\ Kinder\ als\ XML-Objekte\r\n
numComments=45
